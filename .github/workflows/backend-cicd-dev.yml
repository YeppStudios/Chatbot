name: Backend Deployment Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to run the workflow on'
        required: true
        default: 'main'
      host:
        description: 'IP address of the droplet'
        required: false
        default: ''

env:
  REGISTRY: "registry.digitalocean.com/backend-registry-wpip"
  IMAGE_NAME: "backend-chatbot-image"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.inputs.branch }}

    - name: Build container image
      run: docker build --platform=linux/amd64 -t $REGISTRY/$IMAGE_NAME:${{ github.sha }} backend/ --no-cache

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Log in to DigitalOcean Container Registry
      run: doctl registry login --expiry-seconds 600

    - name: Push image to DigitalOcean Container Registry
      run: docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}

    - name: Install jq (JSON processor)
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Delete old images from DigitalOcean Container Registry
      run: |
        echo "Cleaning up old images..."
        REPOSITORY_NAME=$IMAGE_NAME
        KEEP=5
        
        # Fetch all tags and filter out null or empty values
        TAGS=$(doctl registry repository list-tags $REPOSITORY_NAME --output json | \
               jq -r '.[] | select(.Tag != null and .Tag != "" and .ManifestDigest != null and .ManifestDigest != "") | 
                     {Tag: .Tag, Digest: .ManifestDigest, UpdatedAt: .UpdatedAt}')
        
        # Sort tags by UpdatedAt and process them
        echo "$TAGS" | \
        jq -r '. | "\(.Tag) \(.Digest) \(.UpdatedAt)"' | \
        sort -k3 -r | \
        while IFS=' ' read -r TAG DIGEST UPDATED_AT; do
          COUNT=$((COUNT+1))
          if [ $COUNT -le $KEEP ]; then
            echo "Keeping tag: $TAG (digest: ${DIGEST:0:12}...)"
          else
            echo "Deleting tag: $TAG (digest: ${DIGEST:0:12}...)"
            if [ -n "$DIGEST" ]; then
              doctl registry repository delete-manifest $REPOSITORY_NAME $DIGEST -f || \
              echo "Failed to delete manifest with digest: $DIGEST"
            fi
          fi
        done

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - name: Deploy to Digital Ocean droplet via SSH
      uses: appleboy/ssh-action@v1.0.3
      env:
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      with:
        host: ${{ github.event.inputs.host || secrets.DIGITALOCEAN_SSH_HOST }}
        username: ${{ secrets.DIGITALOCEAN_SSH_USER }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
        envs: IMAGE_NAME,REGISTRY,DIGITALOCEAN_ACCESS_TOKEN,GITHUB_SHA,MONGODB_URI,OPENAI_API_KEY,JWT_SECRET_KEY,PINECONE_API_KEY
        script: |
          set -e
          # Install Docker if not present
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            # Reload the user's group assignments
            newgrp docker
          fi
          # Log in to Docker Registry
          echo $DIGITALOCEAN_ACCESS_TOKEN | docker login -u $DIGITALOCEAN_ACCESS_TOKEN --password-stdin registry.digitalocean.com
          # Stop and remove the previous container
          docker stop $IMAGE_NAME || true
          docker rm $IMAGE_NAME || true
          # Clean up unused resources
          echo "Cleaning up unused Docker resources..."
          docker container prune -f      # Remove stopped containers
          docker image prune -af         # Remove all unused images
          docker volume prune -f         # Remove unused volumes
          docker network prune -f        # Remove unused networks (optional)
          # Pull the new image and run it
          echo "Pulling new Docker image..."
          docker pull $REGISTRY/$IMAGE_NAME:${GITHUB_SHA}
          echo "Running new Docker container..."
          docker run -d \
            -p 8000:8000 \
            --restart always \
            --name $IMAGE_NAME \
            -e MONGODB_URI="$MONGODB_URI" \
            -e OPENAI_API_KEY="$OPENAI_API_KEY" \
            -e PINECONE_API_KEY="$PINECONE_API_KEY" \
            -e JWT_SECRET_KEY="$JWT_SECRET_KEY" \
            $REGISTRY/$IMAGE_NAME:${GITHUB_SHA}
          # Verify if the container is running
          if ! docker ps | grep $IMAGE_NAME; then
            echo "Container failed to start"
            docker logs $IMAGE_NAME
            exit 1
          fi
          echo "Deployment successful"
          docker exec $IMAGE_NAME env
